7 px : 24 cycles
	PULS X,Y,DP,B,A
	PSHS X,Y,DP,B,A

6 px + T : 21 cycles
	LDX #$dddd
	LDY #$dddd
	LDD #$dddd
	PSHS X,Y,D

5px + T : 19 cycles
	LDX #$dddd
	LDY #$dddd
	LDB #$dd
	PSHS X,Y,B
	
4px + T : 16 cycles
	LDX #$dddd
	LDY #$dddd
	PSHS X,Y

3px + T : 13 cycles
	LDX #$dddd
	LDA #$dd
	PSHS X,A
	
2px + T : 11 cycles
	LDX #$dddd
	STX ,--S

1px + T : 8 cycles
	LDA #$dd
	STA ,-S
	
T : 14 cycles
	LDA  #$F0
	ANDA ,-S
	ADDA #$0d
	STA  ,S

Calcul poids des combinaisons :
- prise en compte poids LD, ST
- prise en compte du registre déjà chargé

Pour 6px, 5px, 4px, 3px :
- si DP est déjà chargé alors on l'utilise à la place de A ou B :
	=> on active DP dans algo de poids => faire deux matrices de combinaisons une avec DP l'autre sans, celle sans à la priorité en cas d'égalité
	
Optimisation :
Première passe pour gestion des pixels identiques : on fait des LD + ST avec décalage < 127 (2+5)

