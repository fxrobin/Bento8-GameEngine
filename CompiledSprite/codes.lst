(128) Duplicate Name
    128 (main)GMENGINE
/*--------------------------------------------------------------*
 * Compilé avec C6809 v0.83                                     *
 *--------------------------------------------------------------*
 * Fichier source      : .\Sonic2\Engine\GameMode.ass
 * Fichier destination : GameMode.BIN
 * Contenu :
 *     Main     0:GAMEMODE.ASM 1748
 *     Include  0:GMENGINE.ASM 1467
 *     Include  0:EXOMIZER.ASM 2109
 *     Include  0:CONSTANT.ASM 2428
 *--------------------------------------------------------------*/

Macro Pass
Pass1
Pass2
    334                                   INCLUD CONSTANT
    335                           * =======================================>>
    336                           * TO8 Registers
    337                           * =======================================>>
    338
    339                  6049     dk_lecteur           equ   $6049
    340                  604A     dk_piste             equ   $604A
    341                  604C     dk_secteur           equ   $604C
    342                  604F     dk_destination       equ   $604F
    343
    344                           * =======================================>>
    345                           * Physics Constants
    346                           * =======================================>>
    347
    348                  0038     gravity                       equ $38 ; G>>
    349
    350                           * =======================================>>
    351                           * Object Constants
    352                           * =======================================>>
    353
    354                  0002     number_of_reserved_objects       equ 2
    355                  002D     number_of_dynamic_objects        equ 45
    356                  0003     number_of_level_objects          equ 3
    357
    358                           * --------------------------------------->>
    359                           * Object Status Table offsets
    360                           * --------------------------------------->>
    361
    362                  001F     object_size                   equ $1F ; t>>
    363                  001F     next_object                   equ object_>>
    364                            
    365                  0000     id                            equ $00 ; a>>
    366                  0002     render_flags                  equ $02 ; b>>
    367                  0003     x_pos                         equ $03 ; a>>
    368                  0005     x_sub                         equ $05 ; s>>
    369                  0005     y_pos                         equ $05 ; a>>
    370                  0007     y_sub                         equ $07 ; s>>
    371                  0003     x_pixel                       equ x_pos
    372                  0005     y_pixel                       equ x_pos+2>>
    373                  0008     priority                      equ $08 ; $>>
    374                  000A     width_pixels                  equ $0A
    375                  000B     mapping_frame                 equ $0B
    376                  000B     x_vel                         equ $0B ; a>>
    377                  000D     y_vel                         equ $0D ; a>>
    378                  000F     y_radius                      equ $0F ; c>>
    379                  0010     x_radius                      equ $10 ; c>>
    380                  0011     anim_frame                    equ $11
    381                  0012     anim                          equ $12
    382                  0013     prev_anim                     equ $13
    383                  0014     anim_frame_duration           equ $14 ; r>>
    384                  0015     status                        equ $15 ; n>>
    385                  0016     routine                       equ $16
    386                  0017     routine_secondary             equ $17
    387                  0018     objoff_01                     equ $18 ; v>>
    388                  0019     objoff_02                     equ $19
    389                  001A     objoff_03                     equ $1A
    390                  001B     objoff_04                     equ $1B
    391                  001C     objoff_05                     equ $1C
    392                  001D     collision_flags               equ $1D
    393                  001E     subtype                       equ $1E
    394
    395                           * --------------------------------------->>
    396                           * render_flags bitfield variables
    397                  0001     render_xmirror_mask           equ $01 ; b>>
    398                  0002     render_ymirror_mask           equ $02 ; b>>
    399                  0004     render_coordinate1_mask       equ $04 ; b>>
    400                  0008     render_coordinate2_mask       equ $08 ;
    401                  0010     render_ycheckonscreen_mask    equ $10 ; b>>
    402                  0020     render_staticmappings_mask    equ $20 ; b>>
    403                  0040     render_subobjects_mask        equ $40 ; b>>
    404                  0080     render_onscreen_mask          equ $80 ; b>>
    405
    406                           * --------------------------------------->>
    407                           * status bitfield variables
    408                  0001     status_leftfacing_mask        equ $01 ; b>>
    409                  0002     status_inair_mask             equ $02 ; b>>
    410                  0004     status_spinning_mask          equ $04 ; b>>
    411                  0008     status_onobject_mask          equ $08 ; b>>
    412                  0010     status_rolljumping_mask       equ $10 ; b>>
    413                  0020     status_pushing_mask           equ $20 ; b>>
    414                  0040     status_underwater_mask        equ $40 ; b>>
    415                  0080     status_tobedeleted_mask       equ $80 ; b>>
    416
    417                           * --------------------------------------->>
    418                           * status_secondary bitfield variables
    419                  0001     status_sec_hasShield_mask     equ $01 ; b>>
    420                  0002     status_sec_isInvincible_mask  equ $02 ; b>>
    421                  0004     status_sec_hasSpeedShoes_mask equ $04 ; b>>
    422                  0008     status_sec_3_mask             equ $08 ; b>>
    423                  0010     status_sec_4_mask             equ $10 ; b>>
    424                  0020     status_sec_5_mask             equ $20 ; b>>
    425                  0040     status_sec_6_mask             equ $40 ; b>>
    426                  0080     status_sec_isSliding_mask     equ $80 ; b>>
     34        A000                       org $A000
     35
     36                           * =======================================>>
     37                           * GameModeEngineLoader
     38                           * =======================================>>
     39
     40        A000               GameModeEngineLoader
     41
     42                           * Chargement de la page 3 a l'ecran
     43                           *****************************************>>
     44        A000               WaitVBL
     45  7     A000 7D   E7E7             tst   $E7E7                    * >>
     46  3     A003 2A   FB               bpl   WaitVBL                  * >>
     47        A005               WaitVBL_01
     48  7     A005 7D   E7E7             tst   $E7E7                    * >>
     49  3     A008 2B   FB               bmi   WaitVBL_01               * >>
     50        A00A               SwapVideoPage
     51  2     A00A C6   C0               ldb   #$C0                     * >>
     52  5     A00C F7   E7DD             stb   $E7DD                    * >>
     53                            
     54                           * Chargement de la page 2 en zone 0000-3F>>
     55                           *****************************************>>
     56  2     A00F C6   62               ldb   #$62                     * >>
     57  5     A011 F7   E7E6             stb   $E7E6                    * >>
     58                            
     59                           * Chargement de la page 0a en zone 4000-5>>
     60                           *****************************************>>
     61  5     A014 F6   E7C3             ldb   $E7C3                    * >>
     62  2     A017 C4   FE               andb  #$FE                     * >>
     63  5     A019 F7   E7C3             stb   $E7C3                    * >>
     64
     65                           * Copie en page 0a des donnees du mode a >>
     66                           * les groupes de 7 octets sont recopiees >>
     67                           * en page 1 des donees 0000-0100 puis der>>
     68                           *****************************************>>
     69  7     A01C 10FF A04F             sts   CopyCode3+2              ; >>
(70) Expression Error
     70         lda   current_game_mode
(71) Expression Error
     71         ldx   GameModesArray
     72  5+1   A020 EE   86               ldu   a,x++                    ; >>
     73  6+1   A022 10EE 86               lds   a,x++                    ; >>
     74  6+1   A025 10AE 86               ldy   a,x                      ; >>
     75  7     A028 10BF A03C             sty   CopyData2+2              ; >>
     76  4+4   A02C 32   E9 435C          leas  current_game_mode_data,s ; >>
     77        A030               CopyData1
     78  5+7   A030 37   3E               pulu  d,x,y,dp                 ; >>
     79  5+7   A032 34   3E               pshs  d,x,y,dp                 ; >>
     80        A034               CopyData2
     81  5     A034 1183 0000             cmpu  #0                       ; >>
     82  3     A038 26   FC               bne   CopyData1                ; >>
     83
     84                           * Copie en page 0a du code Game Mode Engi>>
     85                           * les groupes de 7 octets sont recopiees >>
     86                           * les donnees a l'avance on gagne un leas>>
     87                           * le builder ajoute des donnees pour que >>
     88                           *****************************************>>
     89  3     A03A CE   A056             ldu   #GameModeEngineBin       * >>
     90        A03D               CopyCode1
     91  5+7   A03D 37   3E               pulu  d,x,y,dp                 ; >>
     92  5+7   A03F 34   3E               pshs  d,x,y,dp                 ; >>
     93        A041               CopyCode2
     94  5     A041 118C 4000             cmps  #$4000                   ; >>
     95  3     A045 26   FC               bne   CopyCode1                ; >>
     96        A047               CopyCode3
     97  4     A047 10CE 0000             lds   #0                       ; >>
     98  5+1   A04B 35   08               puls  dp
     99                            
    100                           * Execution du Game Mode Engine en page 0>>
    101                           *****************************************>>
    102  4     A04D 7E   4000             jmp   $4000
    103
    104                           * =======================================>>
    105                           * GameModeEngine
    106                           * =======================================>>
    107        A050               GameModeEngineBin
    111                                   INCLUD GMENGINE
    112                            ****************************************>>
    113                           * Chargement du mode de jeu (TO8 Thomson)>>
    114                           * --------------------------------------->>
    115                           *
    116                           * Charge les donnees d'un mode de jeu sel>>
    117                           * Donnees b: DRV/TRK, b: SEC, b: nb SEC, >>
    118                           * on termine par l'ecriture en page 1 des>>
    119                           * Remarque:
    120                           * ---------
    121                           * Les donnees sur la disquette sont conti>>
    122                           * sur un secteur, les donnees de fin sont>>
    123                           * en milieu de secteur, c'est l'exomizer >>
    124                           * il n'y a pas de separateur ni de blanc >>
    125                           *
    126                           *****************************************>>
    127
    334                                   INCLUD CONSTANT
    335                           * =======================================>>
    336                           * TO8 Registers
    337                           * =======================================>>
    338
    339                  6049     dk_lecteur           equ   $6049
    340                  604A     dk_piste             equ   $604A
    341                  604C     dk_secteur           equ   $604C
    342                  604F     dk_destination       equ   $604F
    343
    344                           * =======================================>>
    345                           * Physics Constants
    346                           * =======================================>>
    347
    348                  0038     gravity                       equ $38 ; G>>
    349
    350                           * =======================================>>
    351                           * Object Constants
    352                           * =======================================>>
    353
    354                  0002     number_of_reserved_objects       equ 2
    355                  002D     number_of_dynamic_objects        equ 45
    356                  0003     number_of_level_objects          equ 3
    357
    358                           * --------------------------------------->>
    359                           * Object Status Table offsets
    360                           * --------------------------------------->>
    361
    362                  001F     object_size                   equ $1F ; t>>
    363                  001F     next_object                   equ object_>>
    364                            
    365                  0000     id                            equ $00 ; a>>
    366                  0002     render_flags                  equ $02 ; b>>
    367                  0003     x_pos                         equ $03 ; a>>
    368                  0005     x_sub                         equ $05 ; s>>
    369                  0005     y_pos                         equ $05 ; a>>
    370                  0007     y_sub                         equ $07 ; s>>
    371                  0003     x_pixel                       equ x_pos
    372                  0005     y_pixel                       equ x_pos+2>>
    373                  0008     priority                      equ $08 ; $>>
    374                  000A     width_pixels                  equ $0A
    375                  000B     mapping_frame                 equ $0B
    376                  000B     x_vel                         equ $0B ; a>>
    377                  000D     y_vel                         equ $0D ; a>>
    378                  000F     y_radius                      equ $0F ; c>>
    379                  0010     x_radius                      equ $10 ; c>>
    380                  0011     anim_frame                    equ $11
    381                  0012     anim                          equ $12
    382                  0013     prev_anim                     equ $13
    383                  0014     anim_frame_duration           equ $14 ; r>>
    384                  0015     status                        equ $15 ; n>>
    385                  0016     routine                       equ $16
    386                  0017     routine_secondary             equ $17
    387                  0018     objoff_01                     equ $18 ; v>>
    388                  0019     objoff_02                     equ $19
    389                  001A     objoff_03                     equ $1A
    390                  001B     objoff_04                     equ $1B
    391                  001C     objoff_05                     equ $1C
    392                  001D     collision_flags               equ $1D
    393                  001E     subtype                       equ $1E
    394
    395                           * --------------------------------------->>
    396                           * render_flags bitfield variables
    397                  0001     render_xmirror_mask           equ $01 ; b>>
    398                  0002     render_ymirror_mask           equ $02 ; b>>
    399                  0004     render_coordinate1_mask       equ $04 ; b>>
    400                  0008     render_coordinate2_mask       equ $08 ;
    401                  0010     render_ycheckonscreen_mask    equ $10 ; b>>
    402                  0020     render_staticmappings_mask    equ $20 ; b>>
    403                  0040     render_subobjects_mask        equ $40 ; b>>
    404                  0080     render_onscreen_mask          equ $80 ; b>>
    405
    406                           * --------------------------------------->>
    407                           * status bitfield variables
    408                  0001     status_leftfacing_mask        equ $01 ; b>>
    409                  0002     status_inair_mask             equ $02 ; b>>
    410                  0004     status_spinning_mask          equ $04 ; b>>
    411                  0008     status_onobject_mask          equ $08 ; b>>
    412                  0010     status_rolljumping_mask       equ $10 ; b>>
    413                  0020     status_pushing_mask           equ $20 ; b>>
    414                  0040     status_underwater_mask        equ $40 ; b>>
    415                  0080     status_tobedeleted_mask       equ $80 ; b>>
    416
    417                           * --------------------------------------->>
    418                           * status_secondary bitfield variables
    419                  0001     status_sec_hasShield_mask     equ $01 ; b>>
    420                  0002     status_sec_isInvincible_mask  equ $02 ; b>>
    421                  0004     status_sec_hasSpeedShoes_mask equ $04 ; b>>
    422                  0008     status_sec_3_mask             equ $08 ; b>>
    423                  0010     status_sec_4_mask             equ $10 ; b>>
    424                  0020     status_sec_5_mask             equ $20 ; b>>
    425                  0040     status_sec_6_mask             equ $40 ; b>>
    426                  0080     status_sec_isSliding_mask     equ $80 ; b>>
    130        4000                       org $4000
    131                  40               setdp $40
    197                                   INCLUD EXOMIZER
    198                           * Exomizer2 algorithm, backward with litt>>
    199                           * by Fool-DupleX, PrehisTO and Sam from P>>
    200                           *
    201                           * This routine decrunches data compressed>>
    202                           * backward with litterals.
    203                           * This routine was developed and tested o>>
    204
    205                            
    206                           * The Exomizer2 decruncher starts here.
    207                           * call with a JSR exo2 or equivalent.
    208                           *
    209                           * Input    : U = pointer to end of compre>>
    210                           *            Y = pointer to end of output>>
    211                           * Output   : Y = pointer to first byte of>>
    212                           * Modifies : Y.
    213                           *
    214                           * All registers are preserved except Y.
    215                           * This code self modifies and cannot be r>>
    216                           * This code must be contained within a si>>
    217                           * be located anywhere in RAM.
    218
    219  5+10  4000 34   7F       exo2    pshs    u,y,x,dp,d,cc           *>>
(219)0:EXOMIZER.ASM Binary Not Linear
    220  6     4002 1F   50               tfr     pc,d                    *>>
    221  6     4004 1F   8B               tfr     a,dp
    222  4+5   4006 31   8D 00A9          leay    biba,pcr                *>>
    223  2     400A 5F                    clrb
    224  4     400B D7   8D               stb     <bitbuf+1               *>>
    225
    226  2     400D 4F            nxt     clra
    227  5+2   400E 34   06               pshs    a,b
    228  2     4010 C5   0F               bitb    #$0f                    *>>
    229  3     4012 26   03               bne     skp
    230  3     4014 8E   0001             ldx     #$0001                  *>>
    231  2     4017 C6   04       skp     ldb     #4                      *>>
    232  7     4019 8D   6D               bsr     getbits
    233  4+2   401B E7   A0               stb     ,y+                     *>>
    234  2     401D 53                    comb                            *>>
    235  6+0   401E 69   E4       roll    rol     ,s
    236  2     4020 49                    rola
    237  2     4021 5C                    incb
    238  3     4022 2B   FA               bmi     roll
    239  4+0   4024 E6   E4               ldb     ,s
    240  5+3   4026 AF   A1               stx     ,y++                    *>>
    241  4+4   4028 30   8B               leax    d,x                     *>>
    242  5+2   402A 35   06               puls    a,b
    243  2     402C 5C                    incb
    244  2     402D C1   34               cmpb    #52                     *>>
    245  3     402F 26   DC               bne     nxt
    246                            
    247  6+1   4031 10AE 66       go      ldy     6,s                     *>>
    248  2     4034 C6   01       mloop   ldb     #1                      *>>
    249  7     4036 8D   50               bsr     getbits                 *>>
    250  3     4038 26   15               bne     cpy                     *>>
    251  4     403A D7   45               stb     <idx+1                  *>>
    252        403C 8C                    fcb     $8c                     *>>
    253  6     403D 0C   45       rbl     inc     <idx+1                  *>>
    254  2     403F 5C                    incb
    255  7     4040 8D   46               bsr     getbits
    256  3     4042 27   F9               beq     rbl
    257
    258  2     4044 C6   00       idx     ldb     #$00                    *>>
    259  2     4046 C1   10               cmpb    #$10                    *>>
    260  3     4048 27   37               beq     endr
    261  3     404A 25   0F               blo     coffs                   *>>
    262  2     404C 5A                    decb                            *>>
    263  7     404D 8D   39               bsr     getbits                 *>>
    264
    265  6     404F 1F   01       cpy     tfr     d,x                     *>>
    266  4+2   4051 A6   C2       cpyl    lda     ,-u
    267  4+2   4053 A7   A2               sta     ,-y
    268  4+1   4055 30   1F               leax    -1,x
    269  3     4057 26   F8               bne     cpyl
    270  3     4059 20   D9               bra     mloop
    271
    272  7     405B 8D   44       coffs   bsr     cook                    *>>
    273  5+2   405D 34   06               pshs    d
    274  4+1   405F 30   8C 4B            leax    <tab1,pcr
    275  5     4062 1083 0003             cmpd    #$03
    276  3     4066 24   01               bhs     scof
    277  3     4068 3A                    abx
    278  7     4069 8D   1B       scof    bsr     getbix
    279  4+1   406B EB   03               addb    3,x
    280  7     406D 8D   32               bsr     cook
    281  5     406F DD   77               std     <offs+2
    282  5+2   4071 35   10               puls    x
    283
    284  4+1   4073 31   3F       cpy2    leay    -1,y                    *>>
    285  4+4   4075 A6   A9 1234  offs    lda     $1234,y                 *>>
    286  4+0   4079 A7   A4               sta     ,y
    287  4+1   407B 30   1F               leax    -1,x
    288  3     407D 26   F4               bne     cpy2
    289  3     407F 20   B3               bra     mloop
    290
    291  6+1   4081 10AF 66       endr    sty     6,s                     *>>
    292  5+12  4084 35   FF               puls    cc,d,dp,x,y,u,pc        *>>
    293
    294                           * getbits  : get 0 to 16 bits from input >>
    295                           * Input    : B = bit count, U points to i>>
    296                           * Output   : D = bits
    297                           * Modifies : D,U.
    298
    299  4+0   4086 E6   84       getbix  ldb     ,x
    300  6+2   4088 6F   E2       getbits clr     ,-s                     *>>
    301  6+2   408A 6F   E2               clr     ,-s
    302  2     408C 86   12       bitbuf  lda     #$12                    *>>
    303  3     408E 20   09               bra     get3
    304  4+2   4090 A6   C2       get1    lda     ,-u
    305  2     4092 46            get2    rora
    306  3     4093 27   FB               beq     get1                    *>>
    307  6+1   4095 69   61               rol     1,s
    308  6+0   4097 69   E4               rol     ,s
    309  2     4099 5A            get3    decb
    310  3     409A 2A   F6               bpl     get2
    311  4     409C 97   8D               sta     <bitbuf+1               *>>
    312  5+3   409E EC   E1               ldd     ,s++
    313  5     40A0 39                    rts                             *>>
    314                            
    315                           * cook     : computes base[index] + readb>>
    316                           * Input    : B = index
    317                           * Output   : D = base[index] + readbits(&>>
    318                           * Modifies : D,X,U.
    319
    320  4+5   40A1 30   8D 000E  cook    leax    biba,pcr
    321  3     40A5 3A                    abx                             *>>
    322  2     40A6 58                    aslb                            *>>
    323  3     40A7 3A                    abx
    324  7     40A8 8D   DC               bsr     getbix                  *>>
    325  6+1   40AA E3   01               addd    1,x                     *>>
    326  5     40AC 39                    rts
    327
    328                           * Values used in the switch (index)
    329        40AD 04 02 04      tab1    fcb     4,2,4
    330        40B0 10 30 20              fcb     16,48,32
    331
    332        40B3               biba    rmb     156                     *>>
    333
    133
    134  3     414F CE   435C             ldu   #current_game_mode_data
(134)0:GMENGINE.ASM Binary Not Linear
    135  5+2   4152 34   40               pshs  u
    136                            
    137        4154               GameModeEngine
    138                  60               setdp $60
    139  2     4154 86   60               lda   #$60
    140  6     4156 1F   8B               tfr   a,dp                     * >>
    141                            
    142  4+2   4158 E6   C0               ldb   ,u+                      * >>
    143  2     415A 1D                    sex                            * >>
    144  2     415B 84   01               anda  #$01                     * >>
    145  2     415D C4   80               andb  #$80                     * >>
    146  4     415F 97   49               sta   <dk_lecteur
    147  2     4161 86   00               lda   #$00
    148  5     4163 DD   4A               std   <dk_piste
    149                            
    150  2     4165 C6   00               ldb   #$00                     * >>
    151  5     4167 DD   4F               std   <dk_destination
    152                            
    153  5+3   4169 EC   C1               ldd   ,u++
    154  3     416B 2A   02               bpl   GMEContinue              * >>
    155  3     416D 0E   00               jmp   $6000                    * >>
    156        416F               GMEContinue
    157  4     416F 97   4C               sta   <dk_secteur              * >>
    158  5     4171 F7   4199             stb   DKDernierBloc+2          * >>
    159                            
    160  5+4   4174 37   26               pulu  d,y                      * >>
    161  5     4176 B7   419F             sta   NegOffset+2              * >>
    162  5     4179 F7   41A2             stb   Page+1
    163                            
    164  5+2   417C 34   40               pshs  u
    165
    166        417E               DKLecture
    167  2     417E 86   02               lda   #$02
    168  4     4180 97   48               sta   <$6048                   * >>
    169        4182               DKCO
    170  8     4182 BD   E82A             jsr   $E82A                    * >>
    171  6     4185 0C   4C               inc   <$604C                   * >>
    172  4     4187 96   4C               lda   <$604C                   * >>
    173  2     4189 81   10               cmpa  #$10                     * >>
    174  3     418B 23   06               bls   DKContinue               * >>
    175  2     418D 86   01               lda   #$01                     * >>
    176  4     418F 97   4C               sta   <$604C                   * >>
    177  6     4191 0C   4B               inc   <$604B                   * >>
    178        4193               DKContinue
    179  6     4193 0C   4F               inc   <$604F                   * >>
    180  5     4195 DE   4F               ldu   <$604F                   * >>
    181        4197               DKDernierBloc
    182  5     4197 1183 0000             cmpu  #0                       * >>
    183  3     419B 23   E5               bls   DKCO                     * >>
    184        419D               NegOffset
    185  4+4   419D 33   C9 FF00          leau  $FF00,u                  * >>
    186        41A1               Page
    187  2     41A1 86   00               lda   #0                       * >>
    188  5     41A3 B7   E7E5             sta   $E7E5                    * >>
    189  8     41A6 BD   4000             jsr   exo2                     * >>
    190  5+2   41A9 35   40               puls  u
    191  3     41AB 20   A7               bra   GameModeEngine
    192        41AD               fill
    193        41AD                       rmb   (fill-exo2)+((fill-exo2)%7)>>
    194                            
    195        435C               current_game_mode_data
    196
    109                                   * INCCOD GMEDATA
    110                            

000005 Total Errors
        Expression Error      70         lda   current_game_mode
        Expression Error      71         ldx   GameModesArray
          Duplicate Name     128 (main)GMENGINE
       Binary Not Linear     134         ldu   #current_game_mode_data
       Binary Not Linear     219 exo2    pshs    u,y,x,dp,d,cc           * >>

000109 Total Symbols
     0x          Equ   0012 anim
     0x          Equ   0011 anim_frame
     0x          Equ   0014 anim_frame_duration
     2x          Label 40B3 biba
     2x          Label 408C bitbuf
     1x          Label 405B coffs
     0x          Equ   001D collision_flags
     2x          Label 40A1 cook
     1x          Label A043 CopyCode1
     0x          Label A047 CopyCode2
     1x          Label A04D CopyCode3
     1x          Label A036 CopyData1
     1x          Label A03A CopyData2
     1x          Label 404F cpy
     1x          Label 4073 cpy2
     1x          Label 4051 cpyl
     1x Unknown  Equ   0000 current_game_mode
     2x          Label 435C current_game_mode_data
     1x          Label 4182 DKCO
     1x          Label 4193 DKContinue
     1x          Label 4197 DKDernierBloc
     0x          Label 417E DKLecture
     1x          Equ   604F dk_destination
     1x          Equ   6049 dk_lecteur
     1x          Equ   604A dk_piste
     1x          Equ   604C dk_secteur
     1x          Label 4081 endr
     3x          Label 4000 exo2
     2x          Label 41AD fill
     1x          Label 4154 GameModeEngine
     1x          Label A056 GameModeEngineBin
     0x          Label A000 GameModeEngineLoader
     1x Unknown  Equ   0000 GameModesArray
     1x          Label 4090 get1
     1x          Label 4092 get2
     1x          Label 4099 get3
     4x          Label 4088 getbits
     2x          Label 4086 getbix
     1x          Label 416F GMEContinue
     0x          Label 4031 go
     0x          Equ   0038 gravity
     0x          Equ   0000 id
     2x          Label 4044 idx
     0x          Equ   000B mapping_frame
     2x          Label 4034 mloop
     1x          Label 419D NegOffset
     0x          Equ   001F next_object
     0x          Equ   002D number_of_dynamic_objects
     0x          Equ   0003 number_of_level_objects
     0x          Equ   0002 number_of_reserved_objects
     1x          Label 400D nxt
     2x          Equ   001F object_size
     0x          Equ   0018 objoff_01
     0x          Equ   0019 objoff_02
     0x          Equ   001A objoff_03
     0x          Equ   001B objoff_04
     0x          Equ   001C objoff_05
     1x          Label 4075 offs
     1x          Label 41A1 Page
     0x          Equ   0013 prev_anim
     0x          Equ   0008 priority
     1x          Label 403D rbl
     0x          Equ   0004 render_coordinate1_mask
     0x          Equ   0008 render_coordinate2_mask
     0x          Equ   0002 render_flags
     0x          Equ   0080 render_onscreen_mask
     0x          Equ   0020 render_staticmappings_mask
     0x          Equ   0040 render_subobjects_mask
     0x          Equ   0001 render_xmirror_mask
     0x          Equ   0010 render_ycheckonscreen_mask
     0x          Equ   0002 render_ymirror_mask
     1x          Label 401E roll
     0x          Equ   0016 routine
     0x          Equ   0017 routine_secondary
     1x          Label 4069 scof
     1x          Label 4017 skp
     0x          Equ   0015 status
     0x          Equ   0002 status_inair_mask
     0x          Equ   0001 status_leftfacing_mask
     0x          Equ   0008 status_onobject_mask
     0x          Equ   0020 status_pushing_mask
     0x          Equ   0010 status_rolljumping_mask
     0x          Equ   0008 status_sec_3_mask
     0x          Equ   0010 status_sec_4_mask
     0x          Equ   0020 status_sec_5_mask
     0x          Equ   0040 status_sec_6_mask
     0x          Equ   0001 status_sec_hasShield_mask
     0x          Equ   0004 status_sec_hasSpeedShoes_mask
     0x          Equ   0002 status_sec_isInvincible_mask
     0x          Equ   0080 status_sec_isSliding_mask
     0x          Equ   0004 status_spinning_mask
     0x          Equ   0080 status_tobedeleted_mask
     0x          Equ   0040 status_underwater_mask
     0x          Equ   001E subtype
     0x          Label A00A SwapVideoPage
     1x          Label 40AD tab1
     1x          Label A000 WaitVBL
     1x          Label A005 WaitVBL_01
     0x          Equ   000A width_pixels
     0x          Equ   0003 x_pixel
     4x          Equ   0003 x_pos
     0x          Equ   0010 x_radius
     0x          Equ   0005 x_sub
     0x          Equ   000B x_vel
     0x          Equ   0005 y_pixel
     0x          Equ   0005 y_pos
     0x          Equ   000F y_radius
     0x          Equ   0007 y_sub
     0x          Equ   000D y_vel

