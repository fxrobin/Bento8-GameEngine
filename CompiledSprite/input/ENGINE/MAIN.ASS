********************************************************************************
* Moteur de jeu (TO8 Thomson)                                                  *
********************************************************************************
* Auteur  : Benoit Rousseau                                                    *
* Date    : 29/09/2020                                                         *
* Licence :                                                                    *
********************************************************************************
*
********************************************************************************

(main)MAIN
	ORG $6300

********************************************************************************  
* Référence des variables globales
********************************************************************************
exo_src equ $6101
exo_dst equ $6105 

********************************************************************************  
* Initialisation de la palette en blanc
********************************************************************************
	LDD #$00FF
SETBLACKPALETTE
	STA $E7DB	* determine l'indice de couleur
	STB $E7DA	* set de la couleur Vert et Rouge
	STB $E7DA   * set de la couleur Bleu
	ADDA #$02	* increment de l'indice de couleur (x2)
	CMPA #$20	* si on atteint 32 sortie
	BNE	SETBLACKPALETTE

	* Bordure initialisee avec couleur 0
	************************************
	
    LDB $E7DD
	ANDB #$F0
	STB $E7DD
	
********************************************************************************  
* Initialisation du mode video
********************************************************************************
	LDA #$7B	* passage en mode 160x200x16c
	STA $E7DC

********************************************************************************  
* Boucle principale
********************************************************************************

MAINLOOP
	nop
	BRA MAINLOOP
	
********************************************************************************
* Changement de page ESPACE CARTOUCHE (ecriture dans buffer invisible)
*	$E7E6 determine la page affichee dans ESPACE CARTOUCHE (0000 a 3FFF)
*   D5 : 1 = espace cartouche recouvert par de la RAM
*   D4 : 0 = CAS1N valide : banques 0-15 / 1 = CAS2N valide : banques 16-31
*	D5=1 D4=0 D3=0 D2=0 D1=0 D0=0 (#$60) : page 0
*   ...
*	D5=1 D4=0 D3=1 D2=1 D1=1 D0=1 (#$6F) : page 15
*	D5=1 D4=1 D3=0 D2=0 D1=0 D0=0 (#$70) : page 16
*   ...
*	D5=1 D4=1 D3=1 D2=1 D1=1 D0=1 (#$7F) : page 31
*
* Changement de page ESPACE ECRAN (affichage du buffer visible)
*	$E7DD determine la page affichee dans ESPACE ECRAN (4000 a 5FFF)
*	D7=0 D6=0 D5=0 D4=0 (#$0_) : page 0
*	D7=0 D6=1 D5=0 D4=0 (#$4_) : page 1
*	D7=1 D6=0 D5=0 D4=0 (#$8_) : page 2
*	D7=1 D6=1 D5=0 D4=0 (#$C_) : page 3
*   D3 D2 D1 D0  (#$_0 a #$_F) : couleur du cadre
*   Remarque : D5 et D4 utilisable uniquement en mode MO
*
* Changement de page ESPACE DONNNEES
*   $E7E5 determine la page affichee dans ESPACE DONNEES (A000 a DFFF)
*   D4 : 0 = CAS1N valide : banques 0-15 / 1 = CAS2N valide : banques 16-31
*	D4=0 D3=0 D2=0 D1=0 D0=0 (#$60) : page 0
*   ...
*	D4=0 D3=1 D2=1 D1=1 D0=1 (#$6F) : page 15
*	D4=1 D3=0 D2=0 D1=0 D0=0 (#$70) : page 16
*   ...
*	D4=1 D3=1 D2=1 D1=1 D0=1 (#$7F) : page 31
********************************************************************************
SCRC
	BSR VSYNC

*	LDB SCRC0+1
*	ANDB #$01
*	ADDB HERO_ANIMATION_PAG_REF
*	STB HERO_ANIMATION_PAG
	
	LDB SCRC0+1	* charge la valeur du LDB suivant SCRC0 en lisant directement dans le code
	ANDB #$80	* permute #$00 ou #$80 (suivant la valeur B #$00 ou #$FF) / fond couleur 0
	STB $E7DD	* changement page dans ESPACE ECRAN
	COM SCRC0+1	* modification du code alterne 00 et FF sur le LDB suivant SCRC0
SCRC0
	LDB #$00
	ANDB #$02	* permute #$60 ou #$62 (suivant la valeur B #$00 ou #$FF)
	ORB #$60	* espace cartouche recouvert par RAM / ecriture autorisee
	STB $E7E6	* changement page dans ESPACE CARTOUCHE permute 60/62 dans E7E6 pour demander affectation banque 0 ou 2 dans espace cartouche
	RTS			* E7E6 D5=1 pour autoriser affectation banque
				* CAS1N : banques 0-15 CAS2N : banques 16-31

********************************************************************************
* Attente VBL
* -----------
*
*   Synchronisation Verticale $E7E7 bit 7
*     Modifié au début de l'affichage de la première ligne
*     Modifié à la fin de l'affichage de la dernière ligne
*   Synchronisation Horizontale $E7E6 bit 6
*     Modifié au début et à la fin de l'affichage de chaque ligne écran
*
*   Les bits sont à 1 quand le faisceau est dans l'écran
********************************************************************************
VSYNC
VSYNC_1
	TST	$E7E7   * le faisceau n'est pas dans l'écran
	BPL	VSYNC_1 * tant que le bit est à 0 on boucle
VSYNC_2
	TST	$E7E7   * le faisceau est dans l'écran
	BMI	VSYNC_2 * tant que le bit est à 1 on boucle
	RTS         * l'écran est rafraichit